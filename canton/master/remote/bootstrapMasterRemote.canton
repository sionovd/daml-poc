def connectToDomainA() = {
    val participant = participants.remote.find(_.name == "masterBuilding").get
    val remoteDomainName = "domainA"
    val remoteDomainHost = "http://20.56.179.251"
    val remoteDomainPort = "13010"

    val remoteDomainUrl = remoteDomainHost + ":" + remoteDomainPort

    if (!participant.domains.list_registered().map(_._1.domain.unwrap).exists(_  == remoteDomainName)) {
      participant.domains.connect(remoteDomainName, remoteDomainUrl)
    }
    
    utils.retry_until_true() {
        participant.domains.active(remoteDomainName)
    }

    // verify that the connection works
    participant.health.ping(participant)
}

def connectToDomainC() = {
    val participant = participants.remote.find(_.name == "masterBuilding").get
    val remoteDomainName = "domainC"
    val remoteDomainHost = "http://20.50.140.65"
    val remoteDomainPort = "13020"

    val remoteDomainUrl = remoteDomainHost + ":" + remoteDomainPort

    if (!participant.domains.list_registered().map(_._1.domain.unwrap).exists(_  == remoteDomainName)) {
        participant.domains.connect(remoteDomainName, remoteDomainUrl)
    }

    utils.retry_until_true() {
        participant.domains.active(remoteDomainName)
    }

    // verify that the connection works
    participant.health.ping(participant)
}

def reconnect() = {
    scala.util.Try { masterBuilding.domains.reconnect() }
}

def uploadDar() = {
    participants.all.dars.upload("~/daml-poc/.daml/dist/daml-0.1.0.dar")
}

reconnect()

if (masterBuilding.domains.config(domainA.name).isEmpty) {
    connectToDomainA()
}

if (masterBuilding.domains.config(domainC.name).isEmpty) {
    connectToDomainC()
}
