// Connect the participants to the domains

nodes.local start

buildingA.domains.connect_local(domainA)
buildingA.domains.connect_local(domainB)
buildingB.domains.connect_local(domainA)
buildingB.domains.connect_local(domainB)
buildingB.domains.connect_local(domainC)
buildingC.domains.connect_local(domainB)
buildingC.domains.connect_local(domainC)

val aDomainAlias = domainA.name
val masterDomainAlias = domainB.name
val cDomainAlias = domainC.name

// create the parties
val systemA = buildingA.parties.enable("SystemA")
val masterSystem = buildingB.parties.enable("SystemB-Master")
val systemC = buildingC.parties.enable("SystemC")

// Wait until the party enabling has taken effect and a heartbeat has been sent afterwards
val partyAssignment = Set(systemA -> buildingA, masterSystem -> buildingB, systemC -> buildingC)
buildingA.parties.await_topology_heartbeat(partyAssignment)
buildingB.parties.await_topology_heartbeat(partyAssignment)
buildingC.parties.await_topology_heartbeat(partyAssignment)

val darPath = Option(System.getProperty("./.daml/dist/daml-0.1.0.dar")).getOrElse("dars/CantonExamples.dar")
participants.all.dars.upload(darPath)