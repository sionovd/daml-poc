module Passage where

import Permit

-- Represents the actual passage (if there is a contract, it means someone passed.)
template Passage with
    issuer: Party
    admin: Party
    citizenId: Int -- Maybe will become a party?
    club: Text
    passageDate: Date
    permitCid: ContractId Permit
    passageRequest: ContractId PassageRequest
  where
    signatory issuer


-- Represents the passage request. With this contract, you can create a passage (if it is valid)
template PassageRequest
  with
    issuer: Party
    admin: Party
    citizenId: Int -- Maybe will become a party?
    club: Text
    passageDate: Date
    permitCid: ContractId Permit
    isAccepted: Bool
  where
    signatory issuer

    controller issuer can
      AcceptPassage: (ContractId PassageRequest, ContractId Permit, ContractId Passage)
        do
          -- Request validation
          permit <- fetch permitCid
          assertMsg "Permit must be in valid date range" (
                    passageDate >= permit.startDate && 
                    passageDate <= permit.endDate
                  )
          assertMsg "CitizenId must match between Permit and passage" (citizenId == permit.citizenId)
          assertMsg "Club must match between Permit and passage" (club == permit.club)

          passageRequest <- create PassageRequest
            with
              isAccepted = True
              ..

          passage <- create Passage 
            with 
              passageRequest = passageRequest
              ..

          return (passageRequest, permitCid, passage)
      
      CancelRequest: ()
        do return ()

    controller admin can
      RevokeRequest: ()
        do return()
